import java.io.*;
import java.util.*;

public class Driver {
    public static void main(String[] args) throws IOException {
        PrintWriter printWriter = new PrintWriter(System.out, true);
        Reader reader = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer tokenizer = new StreamTokenizer(reader);

        tokenizer.nextToken();
        int totalCases = (int) tokenizer.nval;
        for (int i = 0; i < totalCases; i++) {
            long startTime;

            startTime = System.nanoTime();
            // param deserialization code inject here
            double deserDur = (double) (System.nanoTime() - startTime) / 1000000L;

            startTime = System.nanoTime();
            // input processing code inject here
            double inprocDur = (double) (System.nanoTime() - startTime) / 1000000L;

            startTime = System.nanoTime();
            // unchangeable variables serialization code before execution inject here
            double imvbDur = (double) (System.nanoTime() - startTime) / 1000000L;

            startTime = System.nanoTime();
            // solution invoking code inject here
            double solDur = (double) (System.nanoTime() - startTime) / 1000000L;

            startTime = System.nanoTime();
            // output processing code inject here
            double outprocDur = (double) (System.nanoTime() - startTime) / 1000000L;

            startTime = System.nanoTime();
            // result serialization code inject here
            double serDur = (double) (System.nanoTime() - startTime) / 1000000L;

            startTime = System.nanoTime();
            // additional output serialization code inject here
            double adoserDur = (double) (System.nanoTime() - startTime) / 1000000L;

            startTime = System.nanoTime();
            // unchangeable variables serialization code after execution inject here
            double imvaDur = (double) (System.nanoTime() - startTime) / 1000000L;

            System.out.format("%f %f %f %f %f %f %f %f%n",
                   deserDur, inprocDur, imvbDur, solDur, outprocDur, serDur, adoserDur, imvaDur);
        }
        printWriter.close();
    }
}
